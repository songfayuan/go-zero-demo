// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package sys

import (
	"context"

	"go-zero-demo/rpc/sys/sysclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClickhouseReq  = sysclient.ClickhouseReq
	ClickhouseResp = sysclient.ClickhouseResp
	Empty          = sysclient.Empty
	InfoReq        = sysclient.InfoReq
	InfoResp       = sysclient.InfoResp
	KafkaReq       = sysclient.KafkaReq
	KafkaResp      = sysclient.KafkaResp
	MenuListTree   = sysclient.MenuListTree
	RedisReq       = sysclient.RedisReq
	RedisResp      = sysclient.RedisResp
	UserAddReq     = sysclient.UserAddReq
	UserAddResp    = sysclient.UserAddResp

	Sys interface {
		UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
		UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error)
		// redis增删改查
		RedisAdd(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error)
		RedisDelete(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error)
		RedisUpdate(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error)
		RedisGet(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error)
		// Kafka生产者演示请求
		KafkaProducer(ctx context.Context, in *KafkaReq, opts ...grpc.CallOption) (*KafkaResp, error)
		// Kafka消费者演示请求
		KafkaConsumer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KafkaResp, error)
		// clickhouse增删改查
		ClickhouseAdd(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error)
		ClickhouseDelete(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error)
		ClickhouseUpdate(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error)
		ClickhouseGet(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

func (m *defaultSys) UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultSys) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.UserAdd(ctx, in, opts...)
}

// redis增删改查
func (m *defaultSys) RedisAdd(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.RedisAdd(ctx, in, opts...)
}

func (m *defaultSys) RedisDelete(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.RedisDelete(ctx, in, opts...)
}

func (m *defaultSys) RedisUpdate(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.RedisUpdate(ctx, in, opts...)
}

func (m *defaultSys) RedisGet(ctx context.Context, in *RedisReq, opts ...grpc.CallOption) (*RedisResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.RedisGet(ctx, in, opts...)
}

// Kafka生产者演示请求
func (m *defaultSys) KafkaProducer(ctx context.Context, in *KafkaReq, opts ...grpc.CallOption) (*KafkaResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.KafkaProducer(ctx, in, opts...)
}

// Kafka消费者演示请求
func (m *defaultSys) KafkaConsumer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KafkaResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.KafkaConsumer(ctx, in, opts...)
}

// clickhouse增删改查
func (m *defaultSys) ClickhouseAdd(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.ClickhouseAdd(ctx, in, opts...)
}

func (m *defaultSys) ClickhouseDelete(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.ClickhouseDelete(ctx, in, opts...)
}

func (m *defaultSys) ClickhouseUpdate(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.ClickhouseUpdate(ctx, in, opts...)
}

func (m *defaultSys) ClickhouseGet(ctx context.Context, in *ClickhouseReq, opts ...grpc.CallOption) (*ClickhouseResp, error) {
	client := sysclient.NewSysClient(m.cli.Conn())
	return client.ClickhouseGet(ctx, in, opts...)
}
